<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/ecommerce/store/views/category.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ecommerce/store/views/category.py" />
              <option name="originalContent" value="from drf_yasg.utils import swagger_auto_schema&#10;from rest_framework.generics import ListAPIView, RetrieveAPIView&#10;from rest_framework.permissions import AllowAny&#10;&#10;from ecommerce.store.models.category import Category&#10;from ecommerce.store.serializers.category import (&#10;    CategoryDetailSerializer,&#10;    CategoryListSerializer,&#10;)&#10;&#10;swagger_attr = {'tags': ['Categories']}&#10;&#10;&#10;class CategoryListApiView(ListAPIView):&#10;    serializer_class = CategoryListSerializer&#10;    permission_classes = (AllowAny,)&#10;&#10;    def get_queryset(self):&#10;        categories = Category.objects.all()&#10;        return categories&#10;&#10;    @swagger_auto_schema(&#10;        **swagger_attr,&#10;        operation_summary='Listagem de todas as categorias',&#10;        operation_description='Listagem de todas as categorias disponíveis',&#10;    )&#10;    def get(self, request, *args, **kwargs):&#10;        return super().get(request, *args, **kwargs)&#10;&#10;&#10;class CategoryDetailApiView(RetrieveAPIView):&#10;    serializer_class = CategoryDetailSerializer&#10;    permission_classes = (AllowAny,)&#10;&#10;    def get_object(self):&#10;        category = Category.objects.get(id=self.kwargs['pk'])&#10;        return category&#10;&#10;    @swagger_auto_schema(&#10;        **swagger_attr,&#10;        operation_summary='Detalhes da categoria',&#10;        operation_description='Detalhes da categoria selecionada',&#10;    )&#10;    def get(self, request, *args, **kwargs):&#10;        return super().get(request, *args, **kwargs)&#10;" />
              <option name="updatedContent" value="from drf_yasg.utils import swagger_auto_schema&#10;from rest_framework.generics import ListAPIView, RetrieveAPIView&#10;from rest_framework.permissions import AllowAny&#10;&#10;from ecommerce.store.models.category import Category&#10;from ecommerce.store.serializers.category import (&#10;    CategoryDetailSerializer,&#10;    CategoryListSerializer,&#10;)&#10;&#10;swagger_attr = {'tags': ['Categories']}&#10;&#10;&#10;class CategoryListApiView(ListAPIView):&#10;    serializer_class = CategoryListSerializer&#10;    permission_classes = (AllowAny,)&#10;&#10;    def get_queryset(self):&#10;        categories = Category.objects.all()&#10;        return categories&#10;&#10;    @swagger_auto_schema(&#10;        **swagger_attr,&#10;        operation_summary='Listagem de todas as categorias',&#10;        operation_description='Listagem de todas as categorias disponíveis',&#10;    )&#10;    def get(self, request, *args, **kwargs):&#10;        return super().get(request, *args, **kwargs)&#10;&#10;&#10;class CategoryDetailApiView(RetrieveAPIView):&#10;    serializer_class = CategoryDetailSerializer&#10;    permission_classes = (AllowAny,)&#10;&#10;    def get_object(self):&#10;        category = Category.objects.get(id=self.kwargs['pk'])&#10;        return category&#10;&#10;    @swagger_auto_schema(&#10;        **swagger_attr,&#10;        operation_summary='Detalhes da categoria',&#10;        operation_description='Detalhes da categoria selecionada',&#10;    )&#10;    def get(self, request, *args, **kwargs):&#10;        return super().get(request, *args, **kwargs)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ecommerce/store/views/product.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ecommerce/store/views/product.py" />
              <option name="originalContent" value="from drf_yasg.utils import swagger_auto_schema&#10;from rest_framework.generics import ListAPIView, RetrieveAPIView&#10;from rest_framework.pagination import PageNumberPagination&#10;# from rest_framework.pagination import LimitOffsetPagination&#10;from rest_framework.permissions import AllowAny&#10;&#10;from ecommerce.store.models.product import Product&#10;from ecommerce.store.serializers.product import (&#10;    ProductDetailSerializer,&#10;    ProductListSerializer,&#10;)&#10;&#10;swagger_attr = {'tags': ['Products']}&#10;&#10;&#10;class ProductListApiView(ListAPIView):&#10;    serializer_class = ProductListSerializer&#10;    permission_classes = (AllowAny,)&#10;    pagination_class = PageNumberPagination&#10;    pagination_class.page_size = 10&#10;&#10;&#10;    def get_queryset(self):&#10;        return Product.objects.all()&#10;&#10;    @swagger_auto_schema(&#10;        **swagger_attr,&#10;        operation_summary='Listagem de todos os produtos',&#10;        operation_description='Listagem de todos os produtos',&#10;    )&#10;    def get(self, request, *args, **kwargs):&#10;        return super().get(request, *args, **kwargs)&#10;&#10;&#10;class ProductDetailApiView(RetrieveAPIView):&#10;    serializer_class = ProductDetailSerializer&#10;    permission_classes = (AllowAny,)&#10;&#10;    def get_object(self):&#10;        product = Product.objects.get(pk=self.kwargs['pk'])&#10;        return product&#10;&#10;    @swagger_auto_schema(&#10;        **swagger_attr,&#10;        operation_summary='Detalhes do produto',&#10;        operation_description='Detalhes do produto',&#10;    )&#10;    def get(self, request, *args, **kwargs):&#10;        return super().get(request, *args, **kwargs)&#10;" />
              <option name="updatedContent" value="from drf_yasg.utils import swagger_auto_schema&#10;from rest_framework.generics import ListAPIView, RetrieveAPIView&#10;from rest_framework.pagination import PageNumberPagination&#10;# from rest_framework.pagination import LimitOffsetPagination&#10;from rest_framework.permissions import AllowAny&#10;&#10;from ecommerce.store.models.product import Product&#10;from ecommerce.store.serializers.product import (&#10;    ProductDetailSerializer,&#10;    ProductListSerializer,&#10;)&#10;&#10;swagger_attr = {'tags': ['Products']}&#10;&#10;&#10;class ProductListApiView(ListAPIView):&#10;    serializer_class = ProductListSerializer&#10;    permission_classes = (AllowAny,)&#10;    pagination_class = PageNumberPagination&#10;    pagination_class.page_size = 10&#10;&#10;&#10;    def get_queryset(self):&#10;        return Product.objects.all()&#10;&#10;    @swagger_auto_schema(&#10;        **swagger_attr,&#10;        operation_summary='Listagem de todos os produtos',&#10;        operation_description='Listagem de todos os produtos',&#10;    )&#10;    def get(self, request, *args, **kwargs):&#10;        return super().get(request, *args, **kwargs)&#10;&#10;&#10;class ProductDetailApiView(RetrieveAPIView):&#10;    serializer_class = ProductDetailSerializer&#10;    permission_classes = (AllowAny,)&#10;&#10;    def get_object(self):&#10;        product = Product.objects.get(pk=self.kwargs['pk'])&#10;        return product&#10;&#10;    @swagger_auto_schema(&#10;        **swagger_attr,&#10;        operation_summary='Detalhes do produto',&#10;        operation_description='Detalhes do produto',&#10;    )&#10;    def get(self, request, *args, **kwargs):&#10;        return super().get(request, *args, **kwargs)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ecommerce/store/views/subcategory.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ecommerce/store/views/subcategory.py" />
              <option name="originalContent" value="from drf_yasg.utils import swagger_auto_schema&#10;from rest_framework.generics import (&#10;    ListAPIView,&#10;    RetrieveAPIView,&#10;)&#10;from rest_framework.permissions import AllowAny&#10;&#10;from ecommerce.store.models.subcategory import Subcategory&#10;from ecommerce.store.serializers.subcategory import (&#10;    SubcategoryDetailSerializer,&#10;    SubcategoryListSerializer,&#10;)&#10;&#10;swagger_attr = {'tags': ['Subcategories']}&#10;&#10;&#10;# Create your views here.&#10;class SubcategoryListApiView(ListAPIView):&#10;    serializer_class = SubcategoryListSerializer&#10;    permission_classes = (AllowAny,)&#10;&#10;    def get_queryset(self):&#10;        subcategories = Subcategory.objects.all()&#10;        return subcategories&#10;&#10;    @swagger_auto_schema(&#10;        **swagger_attr,&#10;        operation_summary='Listagem de todas as subcategorias',&#10;        operation_description='Listagem de todas as subcategorias',&#10;    )&#10;    def get(self, request, *args, **kwargs):&#10;        return super().get(request, *args, **kwargs)&#10;&#10;&#10;class SubcategoryDetailApiView(RetrieveAPIView):&#10;    serializer_class = SubcategoryDetailSerializer&#10;    permission_classes = (AllowAny,)&#10;&#10;    def get_object(self):&#10;        subcategory = Subcategory.objects.get(id=self.kwargs['pk'])&#10;        return subcategory&#10;&#10;    @swagger_auto_schema(&#10;        **swagger_attr,&#10;        operation_summary='Detalhes da subcategoria',&#10;        operation_description='Detalhes da subcategoria',&#10;    )&#10;    def get(self, request, *args, **kwargs):&#10;        return super().get(request, *args, **kwargs)&#10;" />
              <option name="updatedContent" value="from drf_yasg.utils import swagger_auto_schema&#10;from rest_framework.generics import (&#10;    ListAPIView,&#10;    RetrieveAPIView,&#10;)&#10;from rest_framework.permissions import AllowAny&#10;&#10;from ecommerce.store.models.subcategory import Subcategory&#10;from ecommerce.store.serializers.subcategory import (&#10;    SubcategoryDetailSerializer,&#10;    SubcategoryListSerializer,&#10;)&#10;&#10;swagger_attr = {'tags': ['Subcategories']}&#10;&#10;&#10;# Create your views here.&#10;class SubcategoryListApiView(ListAPIView):&#10;    serializer_class = SubcategoryListSerializer&#10;    permission_classes = (AllowAny,)&#10;&#10;    def get_queryset(self):&#10;        subcategories = Subcategory.objects.all()&#10;        return subcategories&#10;&#10;    @swagger_auto_schema(&#10;        **swagger_attr,&#10;        operation_summary='Listagem de todas as subcategorias',&#10;        operation_description='Listagem de todas as subcategorias',&#10;    )&#10;    def get(self, request, *args, **kwargs):&#10;        return super().get(request, *args, **kwargs)&#10;&#10;&#10;class SubcategoryDetailApiView(RetrieveAPIView):&#10;    serializer_class = SubcategoryDetailSerializer&#10;    permission_classes = (AllowAny,)&#10;&#10;    def get_object(self):&#10;        subcategory = Subcategory.objects.get(id=self.kwargs['pk'])&#10;        return subcategory&#10;&#10;    @swagger_auto_schema(&#10;        **swagger_attr,&#10;        operation_summary='Detalhes da subcategoria',&#10;        operation_description='Detalhes da subcategoria',&#10;    )&#10;    def get(self, request, *args, **kwargs):&#10;        return super().get(request, *args, **kwargs)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ecommerce/users/views/address.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ecommerce/users/views/address.py" />
              <option name="originalContent" value="from django.contrib.auth import get_user_model&#10;from drf_yasg.utils import swagger_auto_schema&#10;from rest_framework.exceptions import PermissionDenied&#10;from rest_framework.generics import (&#10;    ListCreateAPIView,&#10;    RetrieveUpdateDestroyAPIView,&#10;)&#10;from rest_framework.permissions import IsAuthenticated&#10;from rest_framework_simplejwt.authentication import JWTAuthentication&#10;&#10;from ecommerce.users.models.address import Address&#10;from ecommerce.users.serializers.address import (&#10;    AddressDetailSerializer,&#10;    AddressListCreateSerializer,&#10;)&#10;&#10;User = get_user_model()&#10;&#10;swagger_attr = {'tags': ['Addresses']}&#10;&#10;&#10;# Create your views here.&#10;class AddressListCreateApiView(ListCreateAPIView):&#10;    permission_classes = (IsAuthenticated,)&#10;    authentication_classes = (JWTAuthentication,)&#10;    serializer_class = AddressListCreateSerializer&#10;&#10;    def get_queryset(self):&#10;        addresses = Address.objects.filter(user=self.request.user)&#10;        return addresses&#10;&#10;    @swagger_auto_schema(&#10;        **swagger_attr,&#10;        operation_summary='Listagem de todos os endereços',&#10;        operation_description='Listagem de todos os endereços do usuário logado',&#10;    )&#10;    def get(self, request, *args, **kwargs):&#10;        return super().get(request, *args, **kwargs)&#10;&#10;    @swagger_auto_schema(&#10;        **swagger_attr,&#10;        operation_summary='Criação de endereço',&#10;        operation_description='Criação de endereço para o usuário logado',&#10;    )&#10;    def post(self, request, *args, **kwargs):&#10;        return super().post(request, *args, **kwargs)&#10;&#10;&#10;class AddressDetailApiView(RetrieveUpdateDestroyAPIView):&#10;    permission_classes = (IsAuthenticated,)&#10;    authentication_classes = (JWTAuthentication,)&#10;    serializer_class = AddressDetailSerializer&#10;&#10;    def get_object(self):&#10;        address = Address.objects.get(id=self.kwargs['pk'])&#10;&#10;        if address.user != self.request.user:&#10;            raise PermissionDenied(&#10;                'Você não tem permissão para acessar este endereço.'&#10;            )&#10;        return address&#10;&#10;    @swagger_auto_schema(&#10;        **swagger_attr,&#10;        operation_summary='Detalhes do endereço',&#10;        operation_description='Detalhes do endereço do usuário logado',&#10;    )&#10;    def get(self, request, *args, **kwargs):&#10;        return super().get(request, *args, **kwargs)&#10;&#10;    @swagger_auto_schema(&#10;        **swagger_attr,&#10;        operation_summary='Atualização das informações de endereço',&#10;        operation_description='Atualização das informações de endereço do usuário logado',&#10;    )&#10;    def put(self, request, *args, **kwargs):&#10;        return super().put(request, *args, **kwargs)&#10;&#10;    @swagger_auto_schema(auto_schema=None)&#10;    def patch(self, request, *args, **kwargs):&#10;        return super().patch(request, *args, **kwargs)&#10;&#10;    @swagger_auto_schema(&#10;        **swagger_attr,&#10;        operation_summary='Remoção de endereço',&#10;        operation_description='Remoção de endereço do usuário logado',&#10;    )&#10;    def delete(self, request, *args, **kwargs):&#10;        return super().delete(request, *args, **kwargs)&#10;" />
              <option name="updatedContent" value="from django.contrib.auth import get_user_model&#10;from drf_yasg.utils import swagger_auto_schema&#10;from rest_framework.exceptions import PermissionDenied&#10;from rest_framework.generics import (&#10;    ListCreateAPIView,&#10;    RetrieveUpdateDestroyAPIView,&#10;)&#10;from rest_framework.permissions import IsAuthenticated&#10;from rest_framework_simplejwt.authentication import JWTAuthentication&#10;&#10;from ecommerce.users.models.address import Address&#10;from ecommerce.users.serializers.address import (&#10;    AddressDetailSerializer,&#10;    AddressListCreateSerializer,&#10;)&#10;&#10;User = get_user_model()&#10;&#10;swagger_attr = {'tags': ['Addresses']}&#10;&#10;&#10;# Create your views here.&#10;class AddressListCreateApiView(ListCreateAPIView):&#10;    permission_classes = (IsAuthenticated,)&#10;    authentication_classes = (JWTAuthentication,)&#10;    serializer_class = AddressListCreateSerializer&#10;&#10;    def get_queryset(self):&#10;        addresses = Address.objects.filter(user=self.request.user)&#10;        return addresses&#10;&#10;    @swagger_auto_schema(&#10;        **swagger_attr,&#10;        operation_summary='Listagem de todos os endereços',&#10;        operation_description='Listagem de todos os endereços do usuário logado',&#10;    )&#10;    def get(self, request, *args, **kwargs):&#10;        return super().get(request, *args, **kwargs)&#10;&#10;    @swagger_auto_schema(&#10;        **swagger_attr,&#10;        operation_summary='Criação de endereço',&#10;        operation_description='Criação de endereço para o usuário logado',&#10;    )&#10;    def post(self, request, *args, **kwargs):&#10;        return super().post(request, *args, **kwargs)&#10;&#10;&#10;class AddressDetailApiView(RetrieveUpdateDestroyAPIView):&#10;    permission_classes = (IsAuthenticated,)&#10;    authentication_classes = (JWTAuthentication,)&#10;    serializer_class = AddressDetailSerializer&#10;&#10;    def get_object(self):&#10;        address = Address.objects.get(id=self.kwargs['pk'])&#10;&#10;        if address.user != self.request.user:&#10;            raise PermissionDenied(&#10;                'Você não tem permissão para acessar este endereço.'&#10;            )&#10;        return address&#10;&#10;    @swagger_auto_schema(&#10;        **swagger_attr,&#10;        operation_summary='Detalhes do endereço',&#10;        operation_description='Detalhes do endereço do usuário logado',&#10;    )&#10;    def get(self, request, *args, **kwargs):&#10;        return super().get(request, *args, **kwargs)&#10;&#10;    @swagger_auto_schema(&#10;        **swagger_attr,&#10;        operation_summary='Atualização das informações de endereço',&#10;        operation_description='Atualização das informações de endereço do usuário logado',&#10;    )&#10;    def put(self, request, *args, **kwargs):&#10;        return super().put(request, *args, **kwargs)&#10;&#10;    @swagger_auto_schema(auto_schema=None)&#10;    def patch(self, request, *args, **kwargs):&#10;        return super().patch(request, *args, **kwargs)&#10;&#10;    @swagger_auto_schema(&#10;        **swagger_attr,&#10;        operation_summary='Remoção de endereço',&#10;        operation_description='Remoção de endereço do usuário logado',&#10;    )&#10;    def delete(self, request, *args, **kwargs):&#10;        return super().delete(request, *args, **kwargs)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ecommerce/users/views/phone.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ecommerce/users/views/phone.py" />
              <option name="originalContent" value="from drf_yasg.utils import swagger_auto_schema&#10;from rest_framework.exceptions import PermissionDenied&#10;from rest_framework.generics import (&#10;    ListCreateAPIView,&#10;    RetrieveUpdateDestroyAPIView,&#10;)&#10;from rest_framework.permissions import IsAuthenticated&#10;from rest_framework_simplejwt.authentication import JWTAuthentication&#10;&#10;from ecommerce.users.models.phone import Phone&#10;from ecommerce.users.serializers.phone import (&#10;    PhoneDetailSerializer,&#10;    PhoneListCreateSerializer,&#10;)&#10;&#10;swagger_attr = {'tags': ['Phones']}&#10;&#10;&#10;class PhoneListCreateApiView(ListCreateAPIView):&#10;    permission_classes = (IsAuthenticated,)&#10;    authentication_classes = (JWTAuthentication,)&#10;    serializer_class = PhoneListCreateSerializer&#10;&#10;    def get_queryset(self):&#10;        phones = Phone.objects.filter(user=self.request.user)&#10;        return phones&#10;&#10;    @swagger_auto_schema(&#10;        **swagger_attr,&#10;        operation_summary='Listagem de todos os telefones',&#10;        operation_description='Listagem de todos os telefones do usuário logado',&#10;    )&#10;    def get(self, request, *args, **kwargs):&#10;        return super().get(request, *args, **kwargs)&#10;&#10;    @swagger_auto_schema(&#10;        **swagger_attr,&#10;        operation_summary='Criação de telefone',&#10;        operation_description='Criação de telefone para o usuário logado',&#10;    )&#10;    def post(self, request, *args, **kwargs):&#10;        return super().post(request, *args, **kwargs)&#10;&#10;&#10;class PhoneDetailApiView(RetrieveUpdateDestroyAPIView):&#10;    permission_classes = (IsAuthenticated,)&#10;    authentication_classes = (JWTAuthentication,)&#10;    serializer_class = PhoneDetailSerializer&#10;&#10;    def get_object(self):&#10;        phone = Phone.objects.get(id=self.kwargs['pk'])&#10;        if phone.user != self.request.user:&#10;            raise PermissionDenied(&#10;                'Você não tem permissão para acessar este telefone.'&#10;            )&#10;        return phone&#10;&#10;    @swagger_auto_schema(&#10;        **swagger_attr,&#10;        operation_summary='Detalhes do telefone',&#10;        operation_description='Detalhes do telefone do usuário logado',&#10;    )&#10;    def get(self, request, *args, **kwargs):&#10;        return super().get(request, *args, **kwargs)&#10;&#10;    @swagger_auto_schema(&#10;        **swagger_attr,&#10;        operation_summary='Atualização de telefone',&#10;        operation_description='Atualização de telefone do usuário logado',&#10;    )&#10;    def put(self, request, *args, **kwargs):&#10;        return super().put(request, *args, **kwargs)&#10;&#10;    @swagger_auto_schema(auto_schema=None)&#10;    def patch(self, request, *args, **kwargs):&#10;        return super().patch(request, *args, **kwargs)&#10;&#10;    @swagger_auto_schema(&#10;        **swagger_attr,&#10;        operation_summary='Remoção de telefone',&#10;        operation_description='Remoção de telefone do usuário logado',&#10;    )&#10;    def delete(self, request, *args, **kwargs):&#10;        return super().delete(request, *args, **kwargs)&#10;" />
              <option name="updatedContent" value="from drf_yasg.utils import swagger_auto_schema&#10;from rest_framework.exceptions import PermissionDenied&#10;from rest_framework.generics import (&#10;    ListCreateAPIView,&#10;    RetrieveUpdateDestroyAPIView,&#10;)&#10;from rest_framework.permissions import IsAuthenticated&#10;from rest_framework_simplejwt.authentication import JWTAuthentication&#10;&#10;from ecommerce.users.models.phone import Phone&#10;from ecommerce.users.serializers.phone import (&#10;    PhoneDetailSerializer,&#10;    PhoneListCreateSerializer,&#10;)&#10;&#10;swagger_attr = {'tags': ['Phones']}&#10;&#10;&#10;class PhoneListCreateApiView(ListCreateAPIView):&#10;    permission_classes = (IsAuthenticated,)&#10;    authentication_classes = (JWTAuthentication,)&#10;    serializer_class = PhoneListCreateSerializer&#10;&#10;    def get_queryset(self):&#10;        phones = Phone.objects.filter(user=self.request.user)&#10;        return phones&#10;&#10;    @swagger_auto_schema(&#10;        **swagger_attr,&#10;        operation_summary='Listagem de todos os telefones',&#10;        operation_description='Listagem de todos os telefones do usuário logado',&#10;    )&#10;    def get(self, request, *args, **kwargs):&#10;        return super().get(request, *args, **kwargs)&#10;&#10;    @swagger_auto_schema(&#10;        **swagger_attr,&#10;        operation_summary='Criação de telefone',&#10;        operation_description='Criação de telefone para o usuário logado',&#10;    )&#10;    def post(self, request, *args, **kwargs):&#10;        return super().post(request, *args, **kwargs)&#10;&#10;&#10;class PhoneDetailApiView(RetrieveUpdateDestroyAPIView):&#10;    permission_classes = (IsAuthenticated,)&#10;    authentication_classes = (JWTAuthentication,)&#10;    serializer_class = PhoneDetailSerializer&#10;&#10;    def get_object(self):&#10;        phone = Phone.objects.get(id=self.kwargs['pk'])&#10;        if phone.user != self.request.user:&#10;            raise PermissionDenied(&#10;                'Você não tem permissão para acessar este telefone.'&#10;            )&#10;        return phone&#10;&#10;    @swagger_auto_schema(&#10;        **swagger_attr,&#10;        operation_summary='Detalhes do telefone',&#10;        operation_description='Detalhes do telefone do usuário logado',&#10;    )&#10;    def get(self, request, *args, **kwargs):&#10;        return super().get(request, *args, **kwargs)&#10;&#10;    @swagger_auto_schema(&#10;        **swagger_attr,&#10;        operation_summary='Atualização de telefone',&#10;        operation_description='Atualização de telefone do usuário logado',&#10;    )&#10;    def put(self, request, *args, **kwargs):&#10;        return super().put(request, *args, **kwargs)&#10;&#10;    @swagger_auto_schema(auto_schema=None)&#10;    def patch(self, request, *args, **kwargs):&#10;        return super().patch(request, *args, **kwargs)&#10;&#10;    @swagger_auto_schema(&#10;        **swagger_attr,&#10;        operation_summary='Remoção de telefone',&#10;        operation_description='Remoção de telefone do usuário logado',&#10;    )&#10;    def delete(self, request, *args, **kwargs):&#10;        return super().delete(request, *args, **kwargs)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ecommerce/users/views/user.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ecommerce/users/views/user.py" />
              <option name="originalContent" value="from django.contrib.auth import get_user_model&#10;from django.utils.decorators import method_decorator&#10;from django.views.decorators.csrf import csrf_exempt&#10;from drf_yasg.utils import swagger_auto_schema&#10;from rest_framework import status&#10;from rest_framework.generics import (&#10;    CreateAPIView,&#10;    RetrieveUpdateDestroyAPIView,&#10;    UpdateAPIView,&#10;)&#10;from rest_framework.permissions import AllowAny, IsAuthenticated&#10;from rest_framework.response import Response&#10;from rest_framework.views import APIView&#10;from rest_framework_simplejwt.authentication import JWTAuthentication&#10;&#10;from ecommerce.users.serializers.user import (&#10;    ResetPasswordSerializer,&#10;    UserCreateAccountSerializer,&#10;    UserDetailSerializer,&#10;    UserLoginSerializer,&#10;    UserLogoutSerializer,&#10;)&#10;&#10;User = get_user_model()&#10;&#10;swagger_attr = {'tags': ['Users']}&#10;&#10;&#10;# Create your views here.&#10;class UserCreateAccountApiView(CreateAPIView):&#10;    serializer_class = UserCreateAccountSerializer&#10;    permission_classes = (AllowAny,)&#10;&#10;    @swagger_auto_schema(&#10;        **swagger_attr,&#10;        operation_summary='Criação de conta de usuário',&#10;        operation_description='Criação de conta de usuário com nome, email e senha.',&#10;    )&#10;    def post(self, request, *args, **kwargs):&#10;        return super().post(request, *args, **kwargs)&#10;&#10;&#10;class UserDetailApiView(RetrieveUpdateDestroyAPIView):&#10;    serializer_class = UserDetailSerializer&#10;    permission_classes = (IsAuthenticated,)&#10;    authentication_classes = [JWTAuthentication]&#10;&#10;    def get_object(self):&#10;        user = User.objects.get(id=self.kwargs['pk'])&#10;        return user&#10;&#10;    @swagger_auto_schema(&#10;        **swagger_attr,&#10;        operation_summary='Detalhes do usuário',&#10;        operation_description='Detalhes do usuário logado.',&#10;    )&#10;    def get(self, request, *args, **kwargs):&#10;        return super().get(request, *args, **kwargs)&#10;&#10;    @swagger_auto_schema(&#10;        **swagger_attr,&#10;        operation_summary='Atualização das informações do usuário',&#10;        operation_description='Atualização das informações do usuário logado.',&#10;    )&#10;    def put(self, request, *args, **kwargs):&#10;        return super().put(request, *args, **kwargs)&#10;&#10;    @swagger_auto_schema(auto_schema=None)&#10;    def patch(self, request, *args, **kwargs):&#10;        return super().patch(request, *args, **kwargs)&#10;&#10;    @swagger_auto_schema(&#10;        **swagger_attr,&#10;        operation_summary='Remoção do usuário',&#10;        operation_description='Remoção do usuário logado.',&#10;    )&#10;    def delete(self, request, *args, **kwargs):&#10;        return super().delete(request, *args, **kwargs)&#10;&#10;&#10;class UserLoginApiView(APIView):&#10;    serializer_class = UserLoginSerializer&#10;    permission_classes = (AllowAny,)&#10;&#10;    @swagger_auto_schema(&#10;        **swagger_attr,&#10;        operation_summary='Login do usuário',&#10;        operation_description='Efetua o login do usuário',&#10;        request_body=serializer_class,&#10;    )&#10;    def post(self, request) -&gt; Response:&#10;        serializer = self.serializer_class(data=request.data)&#10;&#10;        if serializer.is_valid():&#10;            return Response(data=serializer.data, status=status.HTTP_200_OK)&#10;        else:&#10;            return Response(&#10;                data=serializer.errors, status=status.HTTP_400_BAD_REQUEST&#10;            )&#10;&#10;&#10;class UserLogoutApiView(APIView):&#10;    serializer_class = UserLogoutSerializer&#10;    permission_classes = (IsAuthenticated,)&#10;    authentication_classes = [JWTAuthentication]&#10;&#10;    @swagger_auto_schema(&#10;        **swagger_attr,&#10;        operation_summary='Logout do usuário',&#10;        operation_description='Efetua o Logout do usuário.',&#10;        request_body=serializer_class,&#10;    )&#10;    def post(self, request) -&gt; Response:&#10;        serializer = self.serializer_class(data=request.data)&#10;&#10;        if serializer.is_valid():&#10;            return Response(status=status.HTTP_205_RESET_CONTENT)&#10;        else:&#10;            return Response(&#10;                data=serializer.errors, status=status.HTTP_401_UNAUTHORIZED&#10;            )&#10;&#10;&#10;class ResetPasswordApiView(UpdateAPIView):&#10;    serializer_class = ResetPasswordSerializer&#10;    permission_classes = (IsAuthenticated,)&#10;    authentication_classes = [JWTAuthentication]&#10;&#10;    def get_object(self):&#10;        user = User.objects.get(id=self.kwargs['pk'])&#10;        return user&#10;&#10;    @swagger_auto_schema(&#10;        **swagger_attr,&#10;        operation_summary='Reset de senha',&#10;        operation_description='Reset de senha do usuário logado.',&#10;    )&#10;    def put(self, request, *args, **kwargs):&#10;        return super().put(request, *args, **kwargs)&#10;&#10;    @swagger_auto_schema(auto_schema=None)&#10;    def patch(self, request, *args, **kwargs):&#10;        return super().patch(request, *args, **kwargs)&#10;" />
              <option name="updatedContent" value="from django.contrib.auth import get_user_model&#10;from django.utils.decorators import method_decorator&#10;from django.views.decorators.csrf import csrf_exempt&#10;from drf_yasg.utils import swagger_auto_schema&#10;from rest_framework import status&#10;from rest_framework.generics import (&#10;    CreateAPIView,&#10;    RetrieveUpdateDestroyAPIView,&#10;    UpdateAPIView,&#10;)&#10;from rest_framework.permissions import AllowAny, IsAuthenticated&#10;from rest_framework.response import Response&#10;from rest_framework.views import APIView&#10;from rest_framework_simplejwt.authentication import JWTAuthentication&#10;&#10;from ecommerce.users.serializers.user import (&#10;    ResetPasswordSerializer,&#10;    UserCreateAccountSerializer,&#10;    UserDetailSerializer,&#10;    UserLoginSerializer,&#10;    UserLogoutSerializer,&#10;)&#10;&#10;User = get_user_model()&#10;&#10;swagger_attr = {'tags': ['Users']}&#10;&#10;&#10;# Create your views here.&#10;class UserCreateAccountApiView(CreateAPIView):&#10;    serializer_class = UserCreateAccountSerializer&#10;    permission_classes = (AllowAny,)&#10;&#10;    @swagger_auto_schema(&#10;        **swagger_attr,&#10;        operation_summary='Criação de conta de usuário',&#10;        operation_description='Criação de conta de usuário com nome, email e senha.',&#10;    )&#10;    def post(self, request, *args, **kwargs):&#10;        return super().post(request, *args, **kwargs)&#10;&#10;&#10;class UserDetailApiView(RetrieveUpdateDestroyAPIView):&#10;    serializer_class = UserDetailSerializer&#10;    permission_classes = (IsAuthenticated,)&#10;    authentication_classes = [JWTAuthentication]&#10;&#10;    def get_object(self):&#10;        user = User.objects.get(id=self.kwargs['pk'])&#10;        return user&#10;&#10;    @swagger_auto_schema(&#10;        **swagger_attr,&#10;        operation_summary='Detalhes do usuário',&#10;        operation_description='Detalhes do usuário logado.',&#10;    )&#10;    def get(self, request, *args, **kwargs):&#10;        return super().get(request, *args, **kwargs)&#10;&#10;    @swagger_auto_schema(&#10;        **swagger_attr,&#10;        operation_summary='Atualização das informações do usuário',&#10;        operation_description='Atualização das informações do usuário logado.',&#10;    )&#10;    def put(self, request, *args, **kwargs):&#10;        return super().put(request, *args, **kwargs)&#10;&#10;    @swagger_auto_schema(auto_schema=None)&#10;    def patch(self, request, *args, **kwargs):&#10;        return super().patch(request, *args, **kwargs)&#10;&#10;    @swagger_auto_schema(&#10;        **swagger_attr,&#10;        operation_summary='Remoção do usuário',&#10;        operation_description='Remoção do usuário logado.',&#10;    )&#10;    def delete(self, request, *args, **kwargs):&#10;        return super().delete(request, *args, **kwargs)&#10;&#10;&#10;class UserLoginApiView(APIView):&#10;    serializer_class = UserLoginSerializer&#10;    permission_classes = (AllowAny,)&#10;&#10;    @swagger_auto_schema(&#10;        **swagger_attr,&#10;        operation_summary='Login do usuário',&#10;        operation_description='Efetua o login do usuário',&#10;        request_body=serializer_class,&#10;    )&#10;    def post(self, request) -&gt; Response:&#10;        serializer = self.serializer_class(data=request.data)&#10;&#10;        if serializer.is_valid():&#10;            return Response(data=serializer.data, status=status.HTTP_200_OK)&#10;        else:&#10;            return Response(&#10;                data=serializer.errors, status=status.HTTP_400_BAD_REQUEST&#10;            )&#10;&#10;&#10;class UserLogoutApiView(APIView):&#10;    serializer_class = UserLogoutSerializer&#10;    permission_classes = (IsAuthenticated,)&#10;    authentication_classes = [JWTAuthentication]&#10;&#10;    @swagger_auto_schema(&#10;        **swagger_attr,&#10;        operation_summary='Logout do usuário',&#10;        operation_description='Efetua o Logout do usuário.',&#10;        request_body=serializer_class,&#10;    )&#10;    def post(self, request) -&gt; Response:&#10;        serializer = self.serializer_class(data=request.data)&#10;&#10;        if serializer.is_valid():&#10;            return Response(status=status.HTTP_205_RESET_CONTENT)&#10;        else:&#10;            return Response(&#10;                data=serializer.errors, status=status.HTTP_401_UNAUTHORIZED&#10;            )&#10;&#10;&#10;class ResetPasswordApiView(UpdateAPIView):&#10;    serializer_class = ResetPasswordSerializer&#10;    permission_classes = (IsAuthenticated,)&#10;    authentication_classes = [JWTAuthentication]&#10;&#10;    def get_object(self):&#10;        user = User.objects.get(id=self.kwargs['pk'])&#10;        return user&#10;&#10;    @swagger_auto_schema(&#10;        **swagger_attr,&#10;        operation_summary='Reset de senha',&#10;        operation_description='Reset de senha do usuário logado.',&#10;    )&#10;    def put(self, request, *args, **kwargs):&#10;        return super().put(request, *args, **kwargs)&#10;&#10;    @swagger_auto_schema(auto_schema=None)&#10;    def patch(self, request, *args, **kwargs):&#10;        return super().patch(request, *args, **kwargs)" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>